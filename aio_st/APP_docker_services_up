#!/usr/bin/env ruby
# ---
# RightScript Name: APP docker services up
# Description: Runs all docker containers; does nothing for containers that are already
#   running.
# Inputs:
#   DOCKER_PROJECT:
#     Category: Application
#     Description: docker-compose project name
#     Input Type: single
#     Required: true
#     Advanced: true
#     Default: text:rightscale
# Attachments: []
# ...
#
# Copyright (c) 2015 RightScale, Inc.
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# 'Software'), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

# Like Kernel#system, but it prints the command bash-style and filters out any sensitive values.
def sys(cmd, sensitive=[])
  sanitized = cmd.dup
  sensitive.each { |s| sanitized.gsub!(s, '...') }
  puts "+ #{sanitized}"

  system(cmd)
end

project = ENV['DOCKER_PROJECT']

dir     = File.join('/var/lib/docker-compose', project)

Dir.chdir(dir) do
  sys("sudo docker-compose up -d") || raise("docker-compose failed")
end
